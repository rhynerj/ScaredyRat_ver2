import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import math
import os, sys
import PySimpleGUI as sg

sys.path.append('./src')

import sr_functions as srf
import sr_help as srh

print = sg.Print # Set print to go to a window rather than the terminal
# print = sg.Multiline.print

## Set theme colors
sg.theme('Light Green 3')

## default ScaredyRat settings
inpath = './'
outpath = './'
outpath2 = './'
raw_sheetSettings = {0: 'Track-Arena 1-Subject 1, Track-Arena 2-Subject 1, Track-Arena 3-Subject 1, Track-Arena 4-Subject 1',
                    1: 'Fear Conditioning',
                    2: 'Fear Conditioning',
                    3: 'FC',
                    4: '7'}
raw_epochSettings = {'Fear Conditioning': {'TrialSelectDropdown':'Fear Conditioning',
                                            'Tone': {...
                                                'Label': 'Tone',...
                                                'UseSpace': True,...
                                                'SubEpochs': {...
                                                    'PreTone': '0,-30,0,True',...
                                                    'Shock': '-1,0,5,True',...
                                                    'PostShock':'-1,5,35,True'}
                                                    }
                                            }
                    }
                    
raw_trialSettings = {0: '1',
                    1: '120',
                    2: '0.1',
                    3: '20'}




## Setup menu layouts
layout_MainWindow = [ [sg.Text('Main Window.\nUse buttons to navigate ScaredyRat settings')],
                [sg.Button('Select Input Folder')],
                [sg.Button('Select Individual Animal Output Folder')],
                [sg.Button('Select Compiled Output Folder')],
                [sg.Button('Sheet Settings')],
                [sg.Button('Trial Settings')],
                [sg.Button('Epoch and Derived Epoch Settings')],
                [sg.Button('View Settings')],
                [sg.Text('')],
                [sg.Button('Run')],
                # [sg.Button('Compile Only')],
                [sg.Text('')],
                [sg.Button('Exit')]]
################################################################################################
## Functions
################################################################################################
def printHelp(helpkey):
    help_dict = {
            'SheetNameHelp' : 'Comma-seperated list of sheet names which were generated by EthoVision.',
            'DetLblHelp' : 'Comma-seperated list of trial control settings labels, that were set in EthoVision.',
            'TrialTypeHelp' : 'Comma-seperated list of trial type names (in common language), matched in order to the trial control settings labels. These are used in plot titles.',
            'TrialTypeABRHelp' : 'Abbreviated names for the trial types, matched in order.  These are used in filenames.',
            'EpochCountHelp' : 'The number of epochs per trial type.  This is a comma-seperated list matched in order to the trial control labels. Sub-epochs will be defined relative to these epochs in another menu.',
            'TimeHelp' : 'Size of each time bin, in seconds. The minimum effective binSize is limited by the sampling frequency of the recorded data.',
            'baselineHelp' : 'Length of time (from trial start to this number of time bins) to use as the behavioural baseline.',
            'FreezeTHelp' : 'The velocity below which the animal is considered freezing (velocity is averaged for each time bin, as defined by binSzie).  This needs to be in the same units as the behavioral recording software output (e.g. cm/s).',
            'dartTHelp' : 'The velocity above which the animal is considered to have darted (velocity is averaged for each time bin, as defined by binSzie).  This needs to be in the same units as the behavioral recording software output (e.g. cm/s).',
            'EpochHelp' : 'The list of epochs, defined in EthoVision.',
            'dEpochHelp' : 'The derived epochs are based on the times defined by the epochs. The list is a comma-seperated list of epoch names, defined by the user.The epoch-based time offset (in seconds) each derived epoch is in the format: [start_index, start_offset, stop_offset plot_flag].\n\n  - start_index is the epoch index in which the derived epoch started (e.g. 0 would be the start of the epoch, 1 would be the next bin in the epoch, and -1 would skip straight to the end of the epoch).\n\n  - start_offset is the time (in time bins) from the starting index (e.g. -30 would start the derived epoch 30 time steps prior to the epoch start). This number is added to or subtracted from the time identified by start_index.\n\n  - stop_offset is the time (in time bins) from the starting index to end the derived epoch (e.g. 25 would end the derived epoch 25 time steps after the starting index). This number is added to or subtracted from the time identified by start_index.\n\n  - plot_flag is either [True] or [False], and determines whether the derived epoch should (True) or should not (False) be plotted in the velocity plot when ScaredyRat is run.',
            }
    helpwin_layout = [  [sg.Text(help_dict.get(helpkey))],
                        [sg.Button('Close')]]
    helpwindow = sg.Window('Help Window', helpwin_layout)

    while True:
        help_event, helpvals= helpwindow.read()
        if help_event == sg.WIN_CLOSED or help_event == 'Close':	# if user closes window or clicks cancel
            helpwindow.close()
            break
    helpwindow.close()
    return

def dEpochTimeEntry(dEpochItem, dEpochTimes):
    return[sg.Text(settingToString(dEpochItem), size=(20,1)), sg.Input(settingToString(dEpochTimes), size=(40,1))]

def settingToString(setting):
    if(not isinstance(setting,list)):
        return str(setting)
    settingStr = str(setting[0])
    if len(setting)==0:
        return ''
    for k in range(1,len(setting)):
        settingStr = settingStr + ',' + str(setting[k])
    return settingStr

def parseSheetSettings(raw_sheet_setting):
    tmp1 = raw_sheet_setting[0].split(',')
    for i in range(0,len(tmp1)):
        tmp1[i] = tmp1[i].lstrip()
    sheetlist = tmp1

    tmp2 = raw_sheet_setting[1].split(',')
    for i in range(0,len(tmp2)):
        tmp2[i] = tmp2[i].lstrip()
    detectionSettingsLabel = tmp2

    tmp3 = raw_sheet_setting[2].split(',')
    for i in range(0,len(tmp3)):
        tmp3[i] = tmp3[i].lstrip()
    trialTypeFull_list = tmp3

    tmp4 = raw_sheet_setting[3].split(',')
    for i in range(0,len(tmp4)):
        tmp4[i] = tmp4[i].lstrip()
    trialType_list = tmp4

    tmp5 = raw_sheet_setting[4].split(',')
    for i in range(0,len(tmp5)):
        tmp5[i] = int(tmp5[i].lstrip())
    epochNum_list = tmp5
    return(sheetlist, detectionSettingsLabel, trialTypeFull_list, trialType_list, epochNum_list)

def parseTrialSettings(raw_trial_settings):
    binSecs = int(raw_trial_settings[0])
    baselineDuration = float(raw_trial_settings[1])
    freezeThresh = float(raw_trial_settings[2])
    dartThresh = float(raw_trial_settings[3])
    return(binSecs, baselineDuration, freezeThresh, dartThresh)

def parseEpochSettings(raw_epoch_settings):
    epochLabel = []
    derivedEpoch_list = []
    dEpochTime = []
    for k in range(0,len(raw_epoch_settings)-2):
        tmp1 = raw_epoch_settings[k][0].split(',')
        for i in range(0,len(tmp1)):
            if raw_epoch_settings[0][1]:
                tmp1[i] = tmp1[i].strip() + ' '
            else:
                tmp1[i] = tmp1[i].strip()
        epochLabel.append(tmp1)

        tmp2 = raw_epoch_settings[k][2].split(',')
        for i in range(0,len(tmp2)):
            tmp2[i] = tmp2[i].lstrip()
        derivedEpoch_list.append(tmp2)

        dEpochTime.append([])
        for iter01 in range(3,3+len(derivedEpoch_list[k])):
            # ## FIX: key error?  Is it looking at an empty list for something?
            # if(iter01 >= len(raw_epochSettings[k])):
            #     raw_epochSettings[k].append('0,0,0,False')
            # print(raw_epochSettings[k][iter01])
            # print(k)
            # print(iter01)
            # print(len(raw_epochSettings))
            dEpochTime[k].append((raw_epochSettings[k][iter01].split(',')))
    return(epochLabel, derivedEpoch_list, dEpochTime)

def printSettings(inpath, outpath, raw_sheet_settings, raw_trial_settings, raw_epoch_settings):

    print(parseSheetSettings(raw_sheet_settings))

    print(parseTrialSettings(raw_trial_settings))

    print(parseEpochSettings(raw_epoch_settings))

def run_SR(inpath, outpath, raw_sheet_settings, raw_trial_settings, raw_epoch_settings):
    sheetlist, detectionSettingsLabel, trialTypeFull_list, trialType_list, epochNum_list = parseSheetSettings(raw_sheet_settings)
    # print(detectionSettingsLabel)
    binSize, baselineDuration, freezeThresh, dartThresh = parseTrialSettings(raw_trial_settings)

    epochLabel_list, derivedEpoch_list_list, derivedEpochTiming_list_list = parseEpochSettings(raw_epoch_settings)

    ## Search the inpath for files
    filelist = []
    for entry in os.scandir(inpath):
        if entry.is_file():
            filelist.append(entry.path)

    for file in filelist:
        for sheet in sheetlist:
            ## set input/output info
            ID,ctx,anim = srf.animal_read(inpath,file,sheet)
            print('Evaluating '+ sheet + ' in the file '+ file)
            # print(ctx)
            # print(ID)
            skipFlag=False
            # Check the context, skipping if the file isn't an excel sheet or properly labeled
            if(ID == "-1" or ID=="nan" or (isinstance(ID,float) and math.isnan(float(ID)))or (isinstance(ID,int) and ID==-1)):
                print('Animal Detection Failure')
                continue
            else:
                for i in range(0,len(detectionSettingsLabel)):
                    # print(detectionSettingsLabel[i])
                    # print(ctx)
                    # print(ctx==detectionSettingsLabel[i])
                    if( ctx == detectionSettingsLabel[i]):
                        # print(ctx)
                        # print(detectionSettingsLabel[i])
                        trialTypeFull = trialTypeFull_list[i]
                        trialType = trialType_list[i]
                        nEpochEvents = epochNum_list[i]
                        if(raw_epoch_settings[i][1]):
                            isSpace=True
                        else:
                            isSpace=False
                        epochLabel = epochLabel_list[i]
                        derivedEpoch_list = derivedEpoch_list_list[i]
                        derivedEpochTiming_list = derivedEpochTiming_list_list[i]
                        skipFlag=False
                        break
                        # print(nEpochEvents)
                    elif(i >= len(detectionSettingsLabel)-1 and ctx != detectionSettingsLabel[i]):
                        print('Trial Control Settings (' + ctx + ' vs. ' + detectionSettingsLabel[i] +') not found! Ignoring ' + sheet + ' in '+file)
                        print(type(ctx))
                        print(type(detectionSettingsLabel[0]))
                        print('Trial Control Settings known:')
                        print(detectionSettingsLabel)
                        skipFlag=True
            if(skipFlag):
                continue
            #Get baseline data
            baseline = {}
            label = 'Recording time'
            baseline = anim[anim[label]<=baselineDuration]
            baselineFreezing, bFTs = srf.get_baseline_freezing(baseline, freezingThreshold=freezeThresh, binSecs=binSize)
            BaselineOutfile = outpath + '/' + trialType + '-baseline-freezing-{}.csv'
            BaselineOutfile = BaselineOutfile.format(ID)
            bFreezing = pd.concat([baselineFreezing],axis=1)
            bFreezing.to_csv(BaselineOutfile)

            # print(nEpochEvents)
            if(nEpochEvents==0):
                continue
            epoch_maxVel = [0]*len(epochLabel)
            epoch_meanVel = [0]*len(epochLabel)
            epoch_medVel = [0]*len(epochLabel)
            epoch_semVel = [0]*len(epochLabel)
            epochFreezing = [0]*len(epochLabel)
            epochFTs = [0]*len(epochLabel)
            epochDarting = [0]*len(epochLabel)
            epochDTs = [0]*len(epochLabel)

            dEpoch_maxVel = [[0]*len(derivedEpoch_list)]*len(epochLabel)
            dEpoch_meanVel = [[0]*len(derivedEpoch_list)]*len(epochLabel)
            dEpoch_medVel = [[0]*len(derivedEpoch_list)]*len(epochLabel)
            dEpoch_semVel = [[0]*len(derivedEpoch_list)]*len(epochLabel)
            dEpochFreezing = [[0]*len(derivedEpoch_list)]*len(epochLabel)
            dEpochFTs = [[0]*len(derivedEpoch_list)]*len(epochLabel)
            dEpochDarting = [[0]*len(derivedEpoch_list)]*len(epochLabel)
            dEpochDTs = [[0]*len(derivedEpoch_list)]*len(epochLabel)

            #find each epoch and derived epoch
            for i in range(0,len(epochLabel)):
                # print(epochLabel[i])
                if isSpace:
                    epochLabel[i] = epochLabel[i].strip() + ' '
                else:
                    epochLabel[i] = epochLabel[i].strip()
                print(epochLabel[i])
                epc = srf.find_delim_segment(anim,nEpochEvents,epochLabel[i])
                # print('EPC')
                # print(epc)
                #Epoch max velocity
                epoch_maxVel[i] = srf.get_top_vels(epc,1,nEpochEvents)#
                # print('EPC')
                # print(epc)
                # print(nEpochEvents)
                epoch_maxVel_file = outpath + '/' + trialType + '-' + epochLabel[i] + '-max-vels-{}.csv'
                epoch_maxVel_file = epoch_maxVel_file.format(ID)
                epoch_maxVel[i].to_csv(epoch_maxVel_file)

                #Epoch Mean velocity
                epoch_meanVel[i] = srf.get_means(epc,epochLabel[i],nEpochEvents)#
                epoch_meanVel_file = outpath + '/' + trialType + '-' + epochLabel[i] + '-mean-vels-{}.csv'
                epoch_meanVel_file = epoch_meanVel_file.format(ID)
                epoch_meanVel[i].to_csv(epoch_meanVel_file)

                #Epoch Median velocity
                epoch_medVel[i] = srf.get_meds(epc,epochLabel[i],nEpochEvents)#
                epoch_medVel_file = outpath + '/' + trialType + '-' + epochLabel[i] + '-med-vels-{}.csv'
                epoch_medVel_file = epoch_medVel_file.format(ID)
                epoch_medVel[i].to_csv(epoch_medVel_file)

                #Epoch Velocity SEM
                epoch_semVel[i] = srf.get_SEMs(epc,epochLabel[i],nEpochEvents)#
                epoch_semVel_file = outpath + '/' + trialType + '-' + epochLabel[i] + '-SEM-vels-{}.csv'
                epoch_semVel_file = epoch_semVel_file.format(ID)
                epoch_semVel[i].to_csv(epoch_semVel_file)
                # print(type(epoch_semVel[i]))

                #Epoch freezing
                epochFreezing[i], epochFTs[i] = srf.get_freezing(epc,nEpochEvents,freezeThresh, binSize)

                #Epoch Darting
                epochDarting[i], epochDTs[i] = srf.get_darting(epc,nEpochEvents,dartThresh, binSize)

                #Epoch Plots
                # plotSettings = parse_plotSettings(derivedEpochTiming_list, derivedEpoch_list)
                srf.plot_outputs(anim, ID, trialTypeFull, outpath, trialType, nEpochEvents, epochFTs[i], epochDTs[i], epochLabel[i], derivedEpochTiming_list, derivedEpoch_list)  #Needs to be updated to insert

                # print(epochDTs[i])
                for m in range(0,len(derivedEpoch_list)):
                    if(derivedEpoch_list[m])=='':
                        continue;

                    #Get derived-epoch data frame
                    dEpoch_df = srf.find_delim_based_time(anim, nEpochEvents, epochLabel[i], int(derivedEpochTiming_list[m][0]), int(derivedEpochTiming_list[m][1]), int(derivedEpochTiming_list[m][2]))
                    #Derived-epoch max velocity
                    dEpoch_maxVel[i][m] = srf.get_top_vels(dEpoch_df,1,nEpochEvents)#
                    dEpoch_maxVel_file = outpath + '/' + trialType + '-' + epochLabel[i] + '_' + derivedEpoch_list[m] + '-max-vels-{}.csv'
                    dEpoch_maxVel_file = dEpoch_maxVel_file.format(ID)
                    dEpoch_maxVel[i][m].to_csv(dEpoch_maxVel_file)

                    # print('derived epoch')

                    #Derived-epoch Mean velocity
                    dEpoch_meanVel[i][m] = srf.get_means(dEpoch_df,derivedEpoch_list[m],nEpochEvents)
                    dEpoch_meanVel_file = outpath + '/' + trialType + '-' + epochLabel[i] + '_' + derivedEpoch_list[m] + '-mean-vels-{}.csv'
                    dEpoch_meanVel_file = dEpoch_meanVel_file.format(ID)
                    dEpoch_meanVel[i][m].to_csv(dEpoch_meanVel_file)

                    #Derived-epoch Median velocity
                    dEpoch_medVel[i][m] = srf.get_meds(dEpoch_df,derivedEpoch_list[m],nEpochEvents)#
                    dEpoch_medVel_file = outpath + '/' + trialType + '-' + epochLabel[i]+ '_' + derivedEpoch_list[m] + '-med-vels-{}.csv'
                    dEpoch_medVel_file = dEpoch_medVel_file.format(ID)
                    dEpoch_medVel[i][m].to_csv(dEpoch_medVel_file)

                    #Derived-epoch Velocity SEM
                    dEpoch_semVel[i][m] = srf.get_SEMs(dEpoch_df,derivedEpoch_list[m],nEpochEvents)#
                    dEpoch_semVel_file = outpath + '/' + trialType + '-' + epochLabel[i]+ '_' + derivedEpoch_list[m] + '-SEM-vels-{}.csv'
                    dEpoch_semVel_file = dEpoch_semVel_file.format(ID)
                    dEpoch_semVel[i][m].to_csv(dEpoch_semVel_file)

                    #Derived-epoch freezing

                    dEpochFreezing[i][m], dEpochFTs[i][m] = srf.get_freezing(dEpoch_df,nEpochEvents,freezeThresh, binSize)

                    #Derived-epoch Darting

                    dEpochDarting[i][m], dEpochDTs[i][m] = srf.get_darting(dEpoch_df,nEpochEvents,dartThresh, binSize)

                    #Derived-epoch Plots
                    # srf.plot_outputs(anim, ID, trialTypeFull, outpath, trialType, nEpochEvents, dEpochFTs[i][m], dEpochDTs[i][m])  #Needs to be updated to insert

            #Concatinate the full mean file per-animal
            # print(dEpoch_meanVel[0][0])
            # print('m=1')
            # print(dEpoch_meanVel[0][1])
            # print('m=2')
            # print(dEpoch_meanVel[0][2])
            allMeans = pd.concat([epoch_meanVel[0]], axis=1)
            for i in range(0,len(epoch_meanVel)):
                allMeans = pd.concat([allMeans,epoch_meanVel[i]], axis=1)
                for j in range(0,len(dEpoch_meanVel[i])):
                    allMeans = pd.concat([allMeans, dEpoch_meanVel[i][j]],axis=1)

            meanOutFile = outpath + '/' + trialType + '-mean-vels-{}.csv'
            meanOutFile=meanOutFile.format(ID)
            allMeans.to_csv(meanOutFile)

            #Concatinate the full median file per-animal
            # allMedians = pd.concat([epoch_medVel, dEpoch_medVel],axis=1)
            allMedians = pd.concat([epoch_medVel[0]], axis=1)
            for i in range(0,len(epoch_medVel)):
                allMedians = pd.concat([allMedians,epoch_medVel[i]], axis=1)
                for j in range(0,len(dEpoch_medVel[i])):
                    allMedians = pd.concat([allMedians, dEpoch_medVel[i][j]],axis=1)
            medOutFile = outpath + '/' + trialType + '-median-vels-{}.csv'
            medOutFile=medOutFile.format(ID)
            allMedians.to_csv(medOutFile)

            #Concatinate the full SEM file per-animal
            # allsem = pd.concat([epoch_semVel, dEpoch_semVel],axis=1)
            allsem = pd.concat([epoch_semVel[0]], axis=1)
            for i in range(0,len(epoch_semVel)):
                allsem = pd.concat([allsem,epoch_semVel[i]], axis=1)
                for j in range(0,len(dEpoch_semVel[i])):
                    allsem = pd.concat([allsem, dEpoch_semVel[i][j]],axis=1)
            semOutFile = outpath + '/' + trialType + '-SEM-vels-{}.csv'
            semOutFile=semOutFile.format(ID)
            allsem.to_csv(semOutFile)

            #Concatinate the full freezing file per-animal
            # allFreeze = pd.concat([epochFreezing, dEpochFreezing],axis=1)
            allFreeze = pd.concat([epochFreezing[0]], axis=1)
            for i in range(0,len(epochFreezing)):
                allFreeze = pd.concat([allFreeze,epochFreezing[i]], axis=1)
                for j in range(0,len(dEpochFreezing[i])):
                    allFreeze = pd.concat([allFreeze, dEpochFreezing[i][j]],axis=1)
            freezeOutFile = outpath + '/' + trialType + '-Freezing-{}.csv'
            freezeOutFile=freezeOutFile.format(ID)
            allFreeze.to_csv(freezeOutFile)

            #Concatinate the full darting file per-animal
            # allDart = pd.concat([epochDarting, dEpochDarting],axis=1)
            allDart = pd.concat([epochDarting[0]], axis=1)
            for i in range(0,len(epochDarting)):
                allDart = pd.concat([allDart,epochDarting[i]], axis=1)
                for j in range(0,len(dEpochDarting[i])):
                    allDart = pd.concat([allDart, dEpochDarting[i][j]],axis=1)
            dartOutFile = outpath + '/' + trialType + '-Darting-{}.csv'
            dartOutFile=dartOutFile.format(ID)
            allDart.to_csv(dartOutFile)

    for k in range(0,len(trialType_list)):
        srf.compile_SR(trialType_list[k],epochLabel_list[k][0],epochNum_list[k], len(derivedEpoch_list_list[k]), derivedEpoch_list_list[k], 'Darting', outpath, outpath2)
        srf.compile_SR(trialType_list[k],epochLabel_list[k][0],epochNum_list[k], len(derivedEpoch_list_list[k]), derivedEpoch_list_list[k], 'Freezing', outpath, outpath2)

        srf.compile_SR(trialType_list[k],epochLabel_list[k][0],epochNum_list[k], len(epochLabel_list[k]), epochLabel_list[k], 'Darting', outpath, outpath2)
        srf.compile_SR(trialType_list[k],epochLabel_list[k][0],epochNum_list[k], len(epochLabel_list[k]), epochLabel_list[k], 'Freezing', outpath, outpath2)
        srf.compile_BaselineSR(trialType_list[k],outpath, outpath2)

################################################################################################
## Execution
################################################################################################
if __name__ == '__main__':
    sg.Print(size=(180,25))
    sg.Print()
    mainWindow = sg.Window('ScaredyRat', layout_MainWindow)

    while True:
        event, values = mainWindow.read()
        if event == sg.WIN_CLOSED or event == 'Exit':	# if user closes window or clicks cancel
            sg.PrintClose()
            break
        elif event == 'Select Input Folder':
            inpath = sg.popup_get_folder('Please select the directory from which to load the Ethovision-style data', initial_folder=inpath)
        elif event == 'Select Individual Animal Output Folder':
            outpath = sg.popup_get_folder('Please select the directory in which to output the individual data files', initial_folder=outpath)
        elif event == 'Select Compiled Output Folder':
            outpath2 = sg.popup_get_folder('Please select the directory in which to output the compiled files', initial_folder=outpath2)
        elif event == 'Sheet Settings':
            sheetlist, detectionSettingsLabel, trialTypeFull_list, trialType_list, epochNum_list = parseSheetSettings(raw_sheetSettings)
            sheetCol =  [
                        [sg.Text('List of sheet names', size=(40,1)), sg.Input(settingToString(sheetlist), size=(120,1)), sg.Button('Help', key='SheetNameHelp')],
                        [sg.Text('Trail Control Settings Labels', size=(40,1)), sg.Input(settingToString(detectionSettingsLabel), size=(120,1)), sg.Button('Help', key='DetLblHelp')],
                        [sg.Text('Trial Type List', size=(40,1)), sg.Input(settingToString(trialTypeFull_list), size=(120,1)), sg.Button('Help', key='TrialTypeHelp')],
                        [sg.Text('Trial Type Abbreviation List', size=(40,1)), sg.Input(settingToString(trialType_list), size=(120,1)), sg.Button('Help', key='TrialTypeABRHelp')],
                        [sg.Text('Number of epochs per trial', size=(40,1)), sg.Input(settingToString(epochNum_list), size=(120,1)), sg.Button('Help', key='EpochCountHelp')]
                        ]
            layout_SheetWin = [  [sg.Text('Sheet Information')],
                        [sg.Column(sheetCol)],
                        [sg.Button('Apply'), sg.Button('Ok'), sg.Button('Cancel') ]]

            sheetWindow = sg.Window('Sheet Settings', layout_SheetWin)

            # Event Loop to process "events" and get the "values" of the inputs
            while True:
                sheet_event, sheet_values = sheetWindow.read()
                if sheet_event == sg.WIN_CLOSED or sheet_event == 'Cancel':	# if user closes window or clicks cancel
                    sheetWindow.close()
                    break
                if sheet_event == 'Apply':	# if user closes window or clicks cancel
                    raw_sheetSettings = sheet_values
                    sheetlist, detectionSettingsLabel, trialTypeFull_list, trialType_list, epochNum_list = parseSheetSettings(raw_sheetSettings)
                    for iter in range(0, len(detectionSettingsLabel)):
                        if(detectionSettingsLabel[iter] in raw_epochSettings:
                            continue
                        else:
                            raw_epochSettings[detectionSettingsLable[iter]] = {'TrialSelectDropdown': detectionSettingsLable[iter],
                                                                            'Tone': {...
                                                                                'Label': 'Tone',...
                                                                                'UseSpace': True,...
                                                                                'SubEpochs': {...
                                                                                    'PreTone': '0,-30,0,True',...
                                                                                    'Shock': '-1,0,5,True',...
                                                                                    'PostShock':'-1,5,35,True'}
                                                                                    }
                                                                            }
                    
                    # print(len(detectionSettingsLabel))
                    # print(len(raw_epochSettings))

                    # if len(raw_epochSettings) > len(detectionSettingsLabel)+1:
                    #     for k in range(len(detectionSettingsLabel)-1, len(raw_epochSettings)):
                            # del raw_epochSettings[k]
                    # if len(raw_epochSettings) < len(detectionSettingsLabel)+1:
                        # for k in range(len(raw_epochSettings)-1, len(detectionSettingsLabel)):
                            # raw_epochSettings[k] = ['Tone', True, 'Shock', '0,0,0,False']

                if sheet_event == 'Ok':	# if user closes window or clicks cancel
                    raw_sheetSettings = sheet_values
                    sheetlist, detectionSettingsLabel, trialTypeFull_list, trialType_list, epochNum_list = parseSheetSettings(raw_sheetSettings)
                    # print(len(detectionSettingsLabel))
                    # print(len(raw_epochSettings))

                    for iter in range(0, len(detectionSettingsLabel)):
                        if(detectionSettingsLabel[iter] in raw_epochSettings:
                            continue
                        else:
                            raw_epochSettings[detectionSettingsLable[iter]] = {'TrialSelectDropdown': detectionSettingsLable[iter],
                                                                            'Tone': {...
                                                                                'Label': 'Tone',...
                                                                                'UseSpace': True,...
                                                                                'SubEpochs': {...
                                                                                    'PreTone': '0,-30,0,True',...
                                                                                    'Shock': '-1,0,5,True',...
                                                                                    'PostShock':'-1,5,35,True'}
                                                                                    }
                                                                            }
                                                                       }
                    

                    #if len(raw_epochSettings) > len(detectionSettingsLabel)+1:
                        # for k in range(len(detectionSettingsLabel)-1, len(raw_epochSettings)):
                        #     del raw_epochSettings[k]
                    # if len(raw_epochSettings) < len(detectionSettingsLabel)+1:
                        # for k in range(len(raw_epochSettings)-1, len(detectionSettingsLabel)):
                            # raw_epochSettings[k] = ['Tone', True, 'shock', '0,0,0,False']

                    sheetWindow.close()
                    break
                if sheet_event == 'SheetNameHelp':
                    printHelp(sheet_event)
                if sheet_event == 'DetLblHelp':
                    printHelp(sheet_event)
                if sheet_event == 'TrialTypeHelp':
                    printHelp(sheet_event)
                if sheet_event == 'TrialTypeABRHelp':
                    printHelp(sheet_event)
                if sheet_event == 'EpochCountHelp':
                    printHelp(sheet_event)
            sheetWindow.close()
        elif event == 'Trial Settings':
            binSize, baselineDuration, freezeThresh, dartThresh = parseTrialSettings(raw_trialSettings)
            trialCol = [
                        [sg.Text('Time Bin Duration (s)', size=(15,1)), sg.Input((binSize), size=(20,1)), sg.Button('Help', key='TimeHelp')],
                        [sg.Text('Baseline Duration (# time bins)', size=(15,1)), sg.Input((baselineDuration), size=(20,1)), sg.Button('Help', key='baselineHelp')],
                        [sg.Text('Freezing Threshold (velocity units)', size=(15,1)), sg.Input((freezeThresh), size=(20,1)), sg.Button('Help', key='FreezeTHelp')],
                        [sg.Text('Darting Threshold (velocity units)', size=(15,1)), sg.Input((dartThresh), size=(20,1)), sg.Button('Help', key='dartTHelp')],
                        ]
            layout_TrialWin = [ [sg.Text('Trial Information')],
                                [sg.Column(trialCol)],
                                [sg.Button('Apply'), sg.Button('Ok'), sg.Button('Cancel')] ]
            trialWindow = sg.Window('Trial Settings', layout_TrialWin)
            # Event Loop to process "events" and get the "values" of the inputs
            while True:
                trial_event, trial_values = trialWindow.read()
                if trial_event == sg.WIN_CLOSED or trial_event == 'Cancel':	# if user closes window or clicks cancel
                    trialWindow.close()
                    break
                if trial_event == 'Ok':	# if user closes window or clicks cancel
                    raw_trialSettings = trial_values
                if trial_event == 'Ok':	# if user closes window or clicks cancel
                    raw_trialSettings = trial_values
                    trialWindow.close()
                    break
                if trial_event == 'TimeHelp':
                    printHelp(trial_event)
                if trial_event == 'baselineHelp':
                    printHelp(trial_event)
                if trial_event == 'FreezeTHelp':
                    printHelp(trial_event)
                if trial_event == 'dartTHelp':
                    printHelp(trial_event)
            trialWindow.close()
        elif event == 'Epoch and Derived Epoch Settings':
            sheetlist, detectionSettingsLabel, trialTypeFull_list, trialType_list, epochNum_list = parseSheetSettings(raw_sheetSettings)
            tcs_keys, epoch_dict, sub_epoch_dicts = parseEpochSettings(raw_epochSettings)  #epochLabel, derivedEpoch_list, derivedEpochTiming_list = parseEpochSettings(raw_epochSettings)
            trialID_epochMenu = 0
            epochID = 0
            epochCol = [
                        [sg.Text('Trial Type'),sg.Combo(detectionSettingsLabel, default_value = detectionSettingsLabel[0], enable_events=True, key='TrialSelectDropdown')],
                        [sg.Text('Epoch label to add', size=(20,1)), sg.Input(''), size=(40,1), key='NewEpoch'), sg.CBox('Space Present',pad=(180,0), default=True, key='UseSpace') , sg.Button('Add Epoch Label',key='AddEpoch'), sg.Button('Help', key='EpochHelp')],
                        [sg.Text('Epoch Label'),sg.Combo(raw_epochSettings[detectionSettingsLabel[0]].keys()), enable_events=True, key='EpochSelectDropdown'), sg.Button('Delete This Epoch',key='DelEpoch')],
                        [sg.Text('')],
                        [sg.Text('Derived Epoch List', size=(20,1)), sg.Input(settingToString(raw_epochSettings[detectionSettingsLabel[0]][raw_epochSettings[detectionSettingsLabel[0]].keys()[0]]['SubEpochs'].keys()), size=(40,1)), sg.Button('Help', key='dEpochHelp')],
                        [sg.Text('Derived Epoch Timing:')],
                        # [sg.Text('')] ] + [dEpochTimeEntry(derivedEpoch_list[trialID_epochMenu][iter],derivedEpochTiming_list[trialID_epochMenu][iter]) for iter in range(0,len(derivedEpoch_list[trialID_epochMenu]))]
                        [sg.Text('')]] + [dEpochTimeEntry(iter_key, iter_val) for iter_key, iter_val in raw_epochSettings[detectionSettingsLabel[0]][raw_epochSettings[detectionSettingsLabel[0]].keys()[0]]['SubEpochs'].items()] 
            layout_EpochWin = [ [sg.Text('Epoch Information')],
                                [sg.Column(epochCol)],
                                [sg.Button('Apply'), sg.Button('Ok'), sg.Button('Cancel')] ]

            epochWindow = sg.Window('Epoch Settings (Click Apply to update the derived epoch timing list)', layout_EpochWin)
            # Event Loop to process "events" and get the "values" of the inputs
            while True:
                epoch_event, epoch_values = epochWindow.read()
                # print(epoch_event)
                print(epoch_values)
                # print(len(epoch_values))
                # print(epoch_values[range(0,len(epoch_values))])
                if epoch_event == 'AddEpoch':
                    raw_epochSettings[epoch_values['TrialSelectDropdown']][epoch_values['NewEpoch']] = {'Label': epoch_values['NewEpoch'], 'UseSpace': epoch_values['UseSpace'], 'SubEpochs': {'Shock': '-1,0,5,True'}}
                
                if epoch_event == 'DelEpoch':
                   del raw_epochSettings[epoch_values['TrialSelecDropdown']][epoch_values['EpochSelectDropdown']]   
                
                if epoch_event == 'EpochSelectDropdown'
                    # for i in range(0,len(detectionSettingsLabel)):
                        # print(detectionSettingsLabel[i])
                        # if(epoch_values['EpochSelectDropdown']==epoch_dict[[i]):
                            # epochID = i
                            
                        # tcs_keys, epoch_dict, sub_epoch_dicts = parseEpochSettings(raw_epochSettings)  #epochLabel, derivedEpoch_list, derivedEpochTiming_list = parseEpochSettings(raw_epochSettings)
                        # sheetlist, detectionSettingsLabel, trialTypeFull_list, trialType_list, epochNum_list = parseSheetSettings(raw_sheetSettings)


                        # print(epochLabel)
                        #print(trialID_epochMenu)
                        
                    epochCol = [
                                [sg.Text('Trial Type'),sg.Combo(detectionSettingsLabel, default_value = epoch_values['TrialSelectDropdown'], enable_events=True, key='TrialSelectDropdown')],
                                [sg.Text('Epoch label to add', size=(20,1)), sg.Input(''), size=(40,1)), sg.CBox('Space Present',pad=(180,0), default=True) , sg.Button('Add Epoch Label',key='AddEpoch'), sg.Button('Help', key='EpochHelp')],
                                [sg.Text('Epoch Label'),sg.Combo(raw_epochSettings[epoch_values['TrialSelectDropdown']].keys()), enable_events=True, key='EpochSelectDropdown')],
                                [sg.Text('')],
                                [sg.Text('Derived Epoch List', size=(20,1)), sg.Input(settingToString(raw_epochSettings[epoch_values['TrialSelectDropdown']][epoch_values['EpochSelectDropdown']]['SubEpochs'].keys()), size=(40,1)), sg.Button('Help', key='dEpochHelp')],
                                [sg.Text('Derived Epoch Timing:')],
                                # [sg.Text('')] ] + [dEpochTimeEntry(derivedEpoch_list[trialID_epochMenu][iter],derivedEpochTiming_list[trialID_epochMenu][iter]) for iter in range(0,len(derivedEpoch_list[trialID_epochMenu]))]
                                [sg.Text('')]] + [dEpochTimeEntry(iter_key, iter_val) for iter_key, iter_val in raw_epochSettings[epoch_values['TrialSelectDropdown']][epoch_values['EpochSelectDropdown']]['SubEpochs'].items()] 
                    layout_EpochWin = [ [sg.Text('Epoch Information')],
                                        [sg.Column(epochCol)],
                                        [sg.Button('Apply'), sg.Button('Ok'), sg.Button('Cancel')] ]
                   
                    epochWindow.close()
                    epochWindow = sg.Window('Epoch Settings', layout_EpochWin)
                
                if epoch_event == 'TrialSelectDropdown':
                    # tcs_keys, epoch_dict, sub_epoch_dicts = parseEpochSettings(raw_epochSettings)  #epochLabel, derivedEpoch_list, derivedEpochTiming_list = parseEpochSettings(raw_epochSettings)
                    # sheetlist, detectionSettingsLabel, trialTypeFull_list, trialType_list, epochNum_list = parseSheetSettings(raw_sheetSettings)
                    # for i in range(0,len(detectionSettingsLabel)):
                        # print(detectionSettingsLabel[i])
                        # tcs_keys, epoch_dict, sub_epoch_dicts = parseEpochSettings(raw_epochSettings)  #epochLabel, derivedEpoch_list, derivedEpochTiming_list = parseEpochSettings(raw_epochSettings)
                        # sheetlist, detectionSettingsLabel, trialTypeFull_list, trialType_list, epochNum_list = parseSheetSettings(raw_sheetSettings)
                        # print(epochLabel)
                        #print(trialID_epochMenu)
                        
                    epochCol = [
                                [sg.Text('Trial Type'),sg.Combo(detectionSettingsLabel, default_value = epoch_values['TrialSelectDropdown'], enable_events=True, key='TrialSelectDropdown')],
                                [sg.Text('Epoch label to add', size=(20,1)), sg.Input(''), size=(40,1)), sg.CBox('Space Present',pad=(180,0), default=True) , sg.Button('Add Epoch Label',key='AddEpoch'), sg.Button('Help', key='EpochHelp')],
                                [sg.Text('Epoch Label'),sg.Combo(raw_epochSettings[epoch_values['TrialSelectDropdown']].keys()), enable_events=True, key='EpochSelectDropdown')],
                                [sg.Text('')],
                                [sg.Text('Derived Epoch List', size=(20,1)), sg.Input(settingToString(raw_epochSettings[epoch_values['TrialSelectDropdown']][epoch_values['EpochSelectDropdown']]['SubEpochs'].keys()), size=(40,1)), sg.Button('Help', key='dEpochHelp')],
                                [sg.Text('Derived Epoch Timing:')],
                                # [sg.Text('')] ] + [dEpochTimeEntry(derivedEpoch_list[trialID_epochMenu][iter],derivedEpochTiming_list[trialID_epochMenu][iter]) for iter in range(0,len(derivedEpoch_list[trialID_epochMenu]))]
                                [sg.Text('')]] + [dEpochTimeEntry(iter_key, iter_val) for iter_key, iter_val in raw_epochSettings[epoch_values['TrialSelectDropdown']][epoch_values['EpochSelectDropdown']]['SubEpochs'].items()] 
                    layout_EpochWin = [ [sg.Text('Epoch Information')],
                                        [sg.Column(epochCol)],
                                        [sg.Button('Apply'), sg.Button('Ok'), sg.Button('Cancel')] ]

                    epochWindow.close()
                    epochWindow = sg.Window('Epoch Settings', layout_EpochWin)


                if epoch_event == sg.WIN_CLOSED or epoch_event == 'Cancel':	# if user closes window or clicks cancel

                    break
                if epoch_event == 'Ok':	# if user clicks Ok
                    # raw_epochSettings[trialID_epochMenu] = epoch_values
                    if(len(epoch_values) < len(raw_epochSettings[trialID_epochMenu])):
                        raw_epochSettings[trialID_epochMenu].clear()

                    for k in range(0,len(epoch_values)-1):
                        if(k < len(raw_epochSettings[trialID_epochMenu])):
                            raw_epochSettings[trialID_epochMenu][k] = (epoch_values[k])
                        else:
                            raw_epochSettings[trialID_epochMenu].append((epoch_values[k]))
                            raw_epochSettings[trialID_epochMenu].append('0,0,0,False')
                    # tmp = raw_epochSettings[trialID_epochMenu][2].split(', ')
                    # for k in range(0,len(tmp)):
                    #     raw_epochSettings[trialID_epochMenu][3+k] = '0,0,0,False'

                    break
                if epoch_event == 'Apply':	# if user clicks Apply to update the window
                    if(len(epoch_values) < len(raw_epochSettings[trialID_epochMenu])):
                        raw_epochSettings[trialID_epochMenu].clear()


                    for k in range(0,len(epoch_values)-1):
                        if(k < len(raw_epochSettings[trialID_epochMenu])):
                            raw_epochSettings[trialID_epochMenu][k] = (epoch_values[k])
                        else:
                            raw_epochSettings[trialID_epochMenu].append((epoch_values[k]))
                            raw_epochSettings[trialID_epochMenu][3+k] = '0,0,0,False'

                    tmp = raw_epochSettings[trialID_epochMenu][2].split(', ')
                    if len(tmp) > len(raw_epochSettings[trialID_epochMenu])-3:
                        for k in range(0,len(tmp)):
                            raw_epochSettings[trialID_epochMenu].append('0,0,0,False')

                    # print('Test epochValues')
                    # print(epoch_values)
                    # print('Test EpochSettings')
                    # print(raw_epochSettings[trialID_epochMenu])
                    # raw_epochSettings[trialID_epochMenu] = epoch_values
                    # Rebuild
                    # sheetlist, detectionSettingsLabel, trialTypeFull_list, trialType_list, epochNum_list = parseSheetSettings(raw_sheetSettings)
                    # tcs_keys, epoch_dict, sub_epoch_dicts = parseEpochSettings(raw_epochSettings ) #epochLabel, derivedEpoch_list, derivedEpochTiming_list = parseEpochSettings(raw_epochSettings)
                    epochCol = [
                                        [sg.Text('Trial Type'),sg.Combo(detectionSettingsLabel, default_value = epoch_values['TrialSelectDropdown'], enable_events=True, key='TrialSelectDropdown')],
                                        [sg.Text('Epoch label to add', size=(20,1)), sg.Input(''), size=(40,1)), sg.CBox('Space Present',pad=(180,0), default=True) , sg.Button('Add Epoch Label',key='AddEpoch'), sg.Button('Help', key='EpochHelp')],
                                        [sg.Text('Epoch Label'),sg.Combo(raw_epochSettings[epoch_values['TrialSelectDropdown']].keys()), enable_events=True, key='EpochSelectDropdown')],
                                        [sg.Text('')],
                                        [sg.Text('Derived Epoch List', size=(20,1)), sg.Input(settingToString(raw_epochSettings[epoch_values['TrialSelectDropdown']][epoch_values['EpochSelectDropdown']]['SubEpochs'].keys()), size=(40,1)), sg.Button('Help', key='dEpochHelp')],
                                        [sg.Text('Derived Epoch Timing:')],
                                        # [sg.Text('')] ] + [dEpochTimeEntry(derivedEpoch_list[trialID_epochMenu][iter],derivedEpochTiming_list[trialID_epochMenu][iter]) for iter in range(0,len(derivedEpoch_list[trialID_epochMenu]))]
                                        [sg.Text('')]] + [dEpochTimeEntry(iter_key, iter_val) for iter_key, iter_val in raw_epochSettings[epoch_values['TrialSelectDropdown']][epoch_values['EpochSelectDropdown']]['SubEpochs'].items()] 
                            layout_EpochWin = [ [sg.Text('Epoch Information')],
                                                [sg.Column(epochCol)],
                                                [sg.Button('Apply'), sg.Button('Ok'), sg.Button('Cancel')] ]
                            epochWindow.close()
                            epochWindow = sg.Window('Epoch Settings', layout_EpochWin)

                    epochWindow.close()
                    epochWindow = sg.Window('Epoch Settings', layout_EpochWin)
                if epoch_event == 'EpochHelp':
                    printHelp(epoch_event)
                if epoch_event == 'dEpochHelp':
                    printHelp(epoch_event)
                if epoch_event == 'dEpochTimeHelp':
                    printHelp(epoch_event)
            epochWindow.close()
        elif event == 'View Settings':
            printSettings(inpath, outpath, raw_sheetSettings, raw_trialSettings, raw_epochSettings)

        elif event == 'Run':
            print(raw_sheetSettings)
            print(raw_trialSettings)
            print(raw_epochSettings)
            run_SR(inpath, outpath, raw_sheetSettings, raw_trialSettings, raw_epochSettings)
            sg.popup('ScaredyRat Complete')
        # elif event == 'Compile Only':
            # sheetlist, detectionSettingsLabel, trialTypeFull_list, trialType_list, epochNum_list = parseSheetSettings(raw_sheetSettings)
            # binSize, baselineDuration, freezeThresh, dartThresh = parseTrialSettings(raw_trialSettings)
            # tcs_keys, epoch_dict, sub_epoch_dicts = parseEpochSettings(raw_epochSettings) #epochLabel, derivedEpoch_list, derivedEpochTiming_list = parseEpochSettings(raw_epochSettings)
            # for k in range(0,len(trialType_list)):
                # srf.compile_SR(trialType_list[k],epochLabel[k][0],epochNum_list[k], len(derivedEpoch_list[k]), derivedEpoch_list[k], 'Darting', outpath, outpath2)
                # srf.compile_SR(trialType_list[k],epochLabel[k][0],epochNum_list[k], len(derivedEpoch_list[k]), derivedEpoch_list[k], 'Freezing', outpath, outpath2)

                # srf.compile_SR(trialType_list[k],epochLabel[k][0],epochNum_list[k], len(epochLabel[k]), epochLabel[k], 'Darting', outpath, outpath2)
                # srf.compile_SR(trialType_list[k],epochLabel[k][0],epochNum_list[k], len(epochLabel[k]), epochLabel[k], 'Freezing', outpath, outpath2)
                # srf.compile_BaselineSR(trialType_list[k],outpath, outpath2)
            # sg.popup('Compile Complete')
    mainWindow.close()